{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass DnDApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${DnDApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  //Registers the new user\n\n  static async register(data) {\n    // { username, password, firstName, lastName, email }\n    let res = await this.request('auth/register', data, 'post');\n    return res.token;\n  }\n\n  //Login the user if username/password are both correct\n\n  static async login(data) {\n    let res = await this.request('auth/token', data, 'post');\n    return res.token;\n  }\n\n  // Get the current user\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  // Edit the current user \n\n  static async editCurrentUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.user;\n  }\n}\nexport default DnDApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","DnDApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","register","res","login","getCurrentUser","username","user","editCurrentUser"],"sources":["/home/relic/capstone-two/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass DnDApi {\n    // the token for interactive with the API will be stored here.\n    static token;\n\n    static async request(endpoint, data = {}, method = \"get\") {\n        console.debug(\"API Call:\", endpoint, data, method);\n\n        //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n        //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n        const url = `${BASE_URL}/${endpoint}`;\n        const headers = { Authorization: `Bearer ${DnDApi.token}` };\n        const params = (method === \"get\")\n            ? data\n            : {};\n        try {\n            return (await axios({ url, method, data, params, headers })).data;\n        } catch (err) {\n            console.error(\"API Error:\", err.response);\n            let message = err.response.data.error.message;\n            throw Array.isArray(message) ? message : [message];\n        }\n    }\n\n    // Individual API routes\n\n    //Registers the new user\n\n    static async register(data) {\n        // { username, password, firstName, lastName, email }\n        let res = await this.request('auth/register', data, 'post')\n        return res.token\n    }\n\n    //Login the user if username/password are both correct\n\n    static async login(data) {\n        let res = await this.request('auth/token', data, 'post')\n        return res.token\n    }\n\n    // Get the current user\n\n    static async getCurrentUser(username) {\n        let res = await this.request(`users/${username}`)\n        return res.user\n    }\n\n    // Edit the current user \n\n    static async editCurrentUser(username, data) {\n        let res = await this.request(`users/${username}`, data, 'patch')\n        return res.user\n    }\n\n}\n\n\nexport default DnDApi"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,CAAC;EACT;;EAGA,aAAaC,OAAOA,CAACC,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAG,KAAK,EAAE;IACtDC,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEJ,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;;IAElD;IACA;IACA,MAAMG,GAAG,GAAI,GAAEX,QAAS,IAAGM,QAAS,EAAC;IACrC,MAAMM,OAAO,GAAG;MAAEC,aAAa,EAAG,UAAST,MAAM,CAACU,KAAM;IAAE,CAAC;IAC3D,MAAMC,MAAM,GAAIP,MAAM,KAAK,KAAK,GAC1BD,IAAI,GACJ,CAAC,CAAC;IACR,IAAI;MACA,OAAO,CAAC,MAAMR,KAAK,CAAC;QAAEY,GAAG;QAAEH,MAAM;QAAED,IAAI;QAAEQ,MAAM;QAAEH;MAAQ,CAAC,CAAC,EAAEL,IAAI;IACrE,CAAC,CAAC,OAAOS,GAAG,EAAE;MACVP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAED,GAAG,CAACE,QAAQ,CAAC;MACzC,IAAIC,OAAO,GAAGH,GAAG,CAACE,QAAQ,CAACX,IAAI,CAACU,KAAK,CAACE,OAAO;MAC7C,MAAMC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IACtD;EACJ;;EAEA;;EAEA;;EAEA,aAAaG,QAAQA,CAACf,IAAI,EAAE;IACxB;IACA,IAAIgB,GAAG,GAAG,MAAM,IAAI,CAAClB,OAAO,CAAC,eAAe,EAAEE,IAAI,EAAE,MAAM,CAAC;IAC3D,OAAOgB,GAAG,CAACT,KAAK;EACpB;;EAEA;;EAEA,aAAaU,KAAKA,CAACjB,IAAI,EAAE;IACrB,IAAIgB,GAAG,GAAG,MAAM,IAAI,CAAClB,OAAO,CAAC,YAAY,EAAEE,IAAI,EAAE,MAAM,CAAC;IACxD,OAAOgB,GAAG,CAACT,KAAK;EACpB;;EAEA;;EAEA,aAAaW,cAAcA,CAACC,QAAQ,EAAE;IAClC,IAAIH,GAAG,GAAG,MAAM,IAAI,CAAClB,OAAO,CAAE,SAAQqB,QAAS,EAAC,CAAC;IACjD,OAAOH,GAAG,CAACI,IAAI;EACnB;;EAEA;;EAEA,aAAaC,eAAeA,CAACF,QAAQ,EAAEnB,IAAI,EAAE;IACzC,IAAIgB,GAAG,GAAG,MAAM,IAAI,CAAClB,OAAO,CAAE,SAAQqB,QAAS,EAAC,EAAEnB,IAAI,EAAE,OAAO,CAAC;IAChE,OAAOgB,GAAG,CAACI,IAAI;EACnB;AAEJ;AAGA,eAAevB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}